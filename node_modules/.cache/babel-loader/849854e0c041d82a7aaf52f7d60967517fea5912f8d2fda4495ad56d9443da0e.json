{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback } from 'react';\nimport { useSkinTone } from '../context/SkinToneContext';\nimport { useAnalytics } from '../../../hooks/useAnalytics';\nexport const useColorAnalysis = () => {\n  _s();\n  const {\n    setAnalysis,\n    setIsAnalyzing,\n    setHistory,\n    setLightCondition\n  } = useSkinTone();\n  const {\n    startAnalysisTracking,\n    trackAnalysis\n  } = useAnalytics();\n  const getFitzpatrickScale = L => {\n    if (L > 80) return 'Type I';\n    if (L > 70) return 'Type II';\n    if (L > 60) return 'Type III';\n    if (L > 50) return 'Type IV';\n    if (L > 40) return 'Type V';\n    return 'Type VI';\n  };\n  const getSeasonsRecommendation = (undertone, lightness) => {\n    if (undertone === 'Warm') {\n      return lightness === 'High' ? ['Spring', 'Autumn'] : ['Autumn'];\n    } else if (undertone === 'Cool') {\n      return lightness === 'High' ? ['Summer', 'Winter'] : ['Winter'];\n    }\n    return lightness === 'High' ? ['Spring', 'Summer'] : ['Autumn', 'Winter'];\n  };\n  const analyzeSkinTone = useCallback(async canvasContext => {\n    const startTime = performance.now();\n    setIsAnalyzing(true);\n    startAnalysisTracking();\n    try {\n      // Sample areas for analysis\n      const sampleAreas = [{\n        x: 270,\n        y: 190,\n        w: 100,\n        h: 100\n      },\n      // Center\n      {\n        x: 220,\n        y: 190,\n        w: 50,\n        h: 50\n      },\n      // Left\n      {\n        x: 370,\n        y: 190,\n        w: 50,\n        h: 50\n      } // Right\n      ];\n      let totalR = 0,\n        totalG = 0,\n        totalB = 0,\n        totalPixels = 0;\n      let totalBrightness = 0;\n\n      // Analyze each sample area\n      for (const area of sampleAreas) {\n        const imageData = canvasContext.getImageData(area.x, area.y, area.w, area.h);\n        for (let i = 0; i < imageData.data.length; i += 4) {\n          const r = imageData.data[i];\n          const g = imageData.data[i + 1];\n          const b = imageData.data[i + 2];\n          totalR += r;\n          totalG += g;\n          totalB += b;\n          totalBrightness += (r + g + b) / 3;\n          totalPixels++;\n        }\n      }\n\n      // Calculate averages\n      const avgR = totalR / totalPixels;\n      const avgG = totalG / totalPixels;\n      const avgB = totalB / totalPixels;\n      const avgBrightness = totalBrightness / totalPixels;\n\n      // Determine lighting condition\n      let lightCondition = 'good';\n      if (avgBrightness < 85) lightCondition = 'dark';else if (avgBrightness > 170) lightCondition = 'bright';\n      setLightCondition(lightCondition);\n\n      // Convert RGB to Lab\n      let rgb = [avgR / 255, avgG / 255, avgB / 255];\n      rgb = rgb.map(v => v > 0.04045 ? Math.pow((v + 0.055) / 1.055, 2.4) : v / 12.92);\n      const X = rgb[0] * 0.4124 + rgb[1] * 0.3576 + rgb[2] * 0.1805;\n      const Y = rgb[0] * 0.2126 + rgb[1] * 0.7152 + rgb[2] * 0.0722;\n      const Z = rgb[0] * 0.0193 + rgb[1] * 0.1192 + rgb[2] * 0.9505;\n      const Xn = 0.95047,\n        Yn = 1.00000,\n        Zn = 1.08883;\n      const xyz = [X / Xn, Y / Yn, Z / Zn].map(v => v > 0.008856 ? Math.pow(v, 1 / 3) : 7.787 * v + 16 / 116);\n      const L = 116 * xyz[1] - 16;\n      const a = 500 * (xyz[0] - xyz[1]);\n      const b = 200 * (xyz[1] - xyz[2]);\n\n      // Determine undertone and lightness\n      const hueAngle = Math.atan2(b, a) * (180 / Math.PI);\n      const undertone = hueAngle > 70 ? 'Warm' : hueAngle < 55 ? 'Cool' : 'Neutral';\n      const lightness = L > 70 ? 'High' : L > 50 ? 'Medium' : 'Low';\n\n      // Generate analysis results\n      const newAnalysis = {\n        undertone,\n        lightness,\n        fitzpatrickType: getFitzpatrickScale(L),\n        seasons: getSeasonsRecommendation(undertone, lightness),\n        labValues: {\n          L: L.toFixed(1),\n          a: a.toFixed(1),\n          b: b.toFixed(1)\n        },\n        rgbValues: {\n          r: Math.round(avgR),\n          g: Math.round(avgG),\n          b: Math.round(avgB)\n        },\n        lightCondition,\n        timestamp: new Date().toISOString(),\n        performanceMetrics: {\n          analysisTime: performance.now() - startTime,\n          lightingCondition: lightCondition,\n          sampleSize: totalPixels\n        }\n      };\n      setAnalysis(newAnalysis);\n      setHistory(prev => [...prev.slice(-4), newAnalysis]);\n      await trackAnalysis(newAnalysis);\n      return newAnalysis;\n    } catch (error) {\n      console.error('Error during skin tone analysis:', error);\n      throw error;\n    } finally {\n      setIsAnalyzing(false);\n    }\n  }, [setAnalysis, setIsAnalyzing, setHistory, setLightCondition, startAnalysisTracking, trackAnalysis]);\n  return {\n    analyzeSkinTone\n  };\n};\n_s(useColorAnalysis, \"P7UmCH9cXB/HQ2N/avyB+ehM4Fs=\", false, function () {\n  return [useSkinTone, useAnalytics];\n});","map":{"version":3,"names":["useCallback","useSkinTone","useAnalytics","useColorAnalysis","_s","setAnalysis","setIsAnalyzing","setHistory","setLightCondition","startAnalysisTracking","trackAnalysis","getFitzpatrickScale","L","getSeasonsRecommendation","undertone","lightness","analyzeSkinTone","canvasContext","startTime","performance","now","sampleAreas","x","y","w","h","totalR","totalG","totalB","totalPixels","totalBrightness","area","imageData","getImageData","i","data","length","r","g","b","avgR","avgG","avgB","avgBrightness","lightCondition","rgb","map","v","Math","pow","X","Y","Z","Xn","Yn","Zn","xyz","a","hueAngle","atan2","PI","newAnalysis","fitzpatrickType","seasons","labValues","toFixed","rgbValues","round","timestamp","Date","toISOString","performanceMetrics","analysisTime","lightingCondition","sampleSize","prev","slice","error","console"],"sources":["/Users/toeychalinee/Lipstick-maker/src/components/SkinToneAnalyzer/hooks/useColorAnalysis.js"],"sourcesContent":["import { useCallback } from 'react';\nimport { useSkinTone } from '../context/SkinToneContext';\nimport { useAnalytics } from '../../../hooks/useAnalytics';\n\nexport const useColorAnalysis = () => {\n  const { \n    setAnalysis, \n    setIsAnalyzing, \n    setHistory, \n    setLightCondition \n  } = useSkinTone();\n  const { startAnalysisTracking, trackAnalysis } = useAnalytics();\n\n  const getFitzpatrickScale = (L) => {\n    if (L > 80) return 'Type I';\n    if (L > 70) return 'Type II';\n    if (L > 60) return 'Type III';\n    if (L > 50) return 'Type IV';\n    if (L > 40) return 'Type V';\n    return 'Type VI';\n  };\n\n  const getSeasonsRecommendation = (undertone, lightness) => {\n    if (undertone === 'Warm') {\n      return lightness === 'High' ? ['Spring', 'Autumn'] : ['Autumn'];\n    } else if (undertone === 'Cool') {\n      return lightness === 'High' ? ['Summer', 'Winter'] : ['Winter'];\n    }\n    return lightness === 'High' ? ['Spring', 'Summer'] : ['Autumn', 'Winter'];\n  };\n\n  const analyzeSkinTone = useCallback(async (canvasContext) => {\n    const startTime = performance.now();\n    setIsAnalyzing(true);\n    startAnalysisTracking();\n\n    try {\n      // Sample areas for analysis\n      const sampleAreas = [\n        { x: 270, y: 190, w: 100, h: 100 },  // Center\n        { x: 220, y: 190, w: 50, h: 50 },    // Left\n        { x: 370, y: 190, w: 50, h: 50 }     // Right\n      ];\n\n      let totalR = 0, totalG = 0, totalB = 0, totalPixels = 0;\n      let totalBrightness = 0;\n\n      // Analyze each sample area\n      for (const area of sampleAreas) {\n        const imageData = canvasContext.getImageData(area.x, area.y, area.w, area.h);\n        \n        for (let i = 0; i < imageData.data.length; i += 4) {\n          const r = imageData.data[i];\n          const g = imageData.data[i + 1];\n          const b = imageData.data[i + 2];\n          \n          totalR += r;\n          totalG += g;\n          totalB += b;\n          totalBrightness += (r + g + b) / 3;\n          totalPixels++;\n        }\n      }\n\n      // Calculate averages\n      const avgR = totalR / totalPixels;\n      const avgG = totalG / totalPixels;\n      const avgB = totalB / totalPixels;\n      const avgBrightness = totalBrightness / totalPixels;\n\n      // Determine lighting condition\n      let lightCondition = 'good';\n      if (avgBrightness < 85) lightCondition = 'dark';\n      else if (avgBrightness > 170) lightCondition = 'bright';\n      setLightCondition(lightCondition);\n\n      // Convert RGB to Lab\n      let rgb = [avgR/255, avgG/255, avgB/255];\n      rgb = rgb.map(v => v > 0.04045 ? Math.pow((v + 0.055) / 1.055, 2.4) : v / 12.92);\n      \n      const X = rgb[0] * 0.4124 + rgb[1] * 0.3576 + rgb[2] * 0.1805;\n      const Y = rgb[0] * 0.2126 + rgb[1] * 0.7152 + rgb[2] * 0.0722;\n      const Z = rgb[0] * 0.0193 + rgb[1] * 0.1192 + rgb[2] * 0.9505;\n\n      const Xn = 0.95047, Yn = 1.00000, Zn = 1.08883;\n      const xyz = [X/Xn, Y/Yn, Z/Zn].map(v => \n        v > 0.008856 ? Math.pow(v, 1/3) : (7.787 * v) + 16/116\n      );\n\n      const L = (116 * xyz[1]) - 16;\n      const a = 500 * (xyz[0] - xyz[1]);\n      const b = 200 * (xyz[1] - xyz[2]);\n\n      // Determine undertone and lightness\n      const hueAngle = Math.atan2(b, a) * (180/Math.PI);\n      const undertone = hueAngle > 70 ? 'Warm' : hueAngle < 55 ? 'Cool' : 'Neutral';\n      const lightness = L > 70 ? 'High' : L > 50 ? 'Medium' : 'Low';\n\n      // Generate analysis results\n      const newAnalysis = {\n        undertone,\n        lightness,\n        fitzpatrickType: getFitzpatrickScale(L),\n        seasons: getSeasonsRecommendation(undertone, lightness),\n        labValues: { L: L.toFixed(1), a: a.toFixed(1), b: b.toFixed(1) },\n        rgbValues: { r: Math.round(avgR), g: Math.round(avgG), b: Math.round(avgB) },\n        lightCondition,\n        timestamp: new Date().toISOString(),\n        performanceMetrics: {\n          analysisTime: performance.now() - startTime,\n          lightingCondition: lightCondition,\n          sampleSize: totalPixels\n        }\n      };\n\n      setAnalysis(newAnalysis);\n      setHistory(prev => [...prev.slice(-4), newAnalysis]);\n      await trackAnalysis(newAnalysis);\n\n      return newAnalysis;\n    } catch (error) {\n      console.error('Error during skin tone analysis:', error);\n      throw error;\n    } finally {\n      setIsAnalyzing(false);\n    }\n  }, [setAnalysis, setIsAnalyzing, setHistory, setLightCondition, startAnalysisTracking, trackAnalysis]);\n\n  return { analyzeSkinTone };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}